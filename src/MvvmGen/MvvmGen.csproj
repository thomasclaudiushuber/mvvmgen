<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Configurations>Debug;Release;MvvmGen_PureCodeGeneration</Configurations>
    <RootNamespace>MvvmGen</RootNamespace>
  </PropertyGroup>

  <PropertyGroup>
    <Title>MvvmGen</Title>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <PackageTags>mvvm mvvmgen wpf uwp winui xamarin maui uno avalonia xaml csharp generator</PackageTags>
    <Product>MvvmGen</Product>
    <PackageProjectUrl>https://github.com/thomasclaudiushuber/mvvmgen</PackageProjectUrl>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <RepositoryUrl>https://github.com/thomasclaudiushuber/mvvmgen</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <Language>en-US</Language>
    <PackageIcon>packageIcon.png</PackageIcon>
    <PackageReadmeFile>readme.md</PackageReadmeFile>
    <PackageReleaseNotes>Version 1.4.0:
- Support partial properties in ViewModels (https://github.com/thomasclaudiushuber/mvvmgen/issues/105)
- Generated ViewModel interface now extends INotifyPropertyChanged (https://github.com/thomasclaudiushuber/mvvmgen/issues/106)

Version 1.3.0:
- New CommandType property on [ViewModel] attribute to specify a custom IDelegateCommand implementation.
- New ModelPropertyName property on [ViewModel] attribute to set the name of the property that contains the wrapped model specified via the ModelType property.
- New ModelPropertiesToIgnore property on [ViewModel] attribute to set a comma-separated list of model properties that should not be generated for the model specified via the ModelType property.
- Fix nullable warnings when generating command properties.
- Fix interface generation when ViewModel has generic methods.
- Fix constructor generation when base ViewModel has [Inject] attributes.

Version 1.2.1:
- Ensure that [ViewModelGenerateInterface] also generates command properties

Version 1.2.0:
- New [ViewModelGenerateInterface] attribute to generate an interface for a ViewModel. This supports more unit testing scenarios
- If [ViewModelGenerateInterface] is set, [ViewModelGenerateFactory] will return the interface type instead of the ViewModel type.
- New ReturnType property on [ViewModelGenerateFactory] attribute allows you to explicitly define a return type of the factory.
- Source generator implements now the newer IIncrementalGenerator interface
- The model used by the source generator implements Equals to support caching between generation steps. This makes the generator more performant, which is especially noticable in larger solutions.
- Bug fix for [ViewModelGenerateFactory] attribute. When injecting an IEventAggregator into the ViewModel, the factory now also has the correct constructor parameters.
- Minor code optimizations
	</PackageReleaseNotes>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' != 'MvvmGen_PureCodeGeneration'">
    <PackageId>MvvmGen</PackageId>
    <IncludeBuildOutput>true</IncludeBuildOutput>
    <Description>MvvmGen is a lightweight, modern MVVM library for XAML applications. It is built with a strong focus on C# source generators to help you to efficiently apply the Model-View-ViewModel pattern in your WPF, WinUI, Xamarin.Forms, .NET MAUI, Uno Platform, and AvaloniaUI apps. MvvmGen is your friend who writes all the boilerplate for you.</Description>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'MvvmGen_PureCodeGeneration'">
    <PackageId>MvvmGen.PureCodeGeneration</PackageId>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <DevelopmentDependency>true</DevelopmentDependency>
    <Description>MvvmGen.PureCodeGeneration is a lightweight, modern MVVM library for XAML applications. This package is a special version of the MvvmGen NuGet package. It has the same functionality, but it generates not only your ViewModels, but also the full MvvmGen library. This means that you have zero runtime dependencies with this package. As the package name says, it's pure code generation.</Description>
  </PropertyGroup>

  <ItemGroup Condition="'$(Configuration)' != 'MvvmGen_PureCodeGeneration'">
    <None Include="..\MvvmGen.SourceGenerators\bin\$(Configuration)\netstandard2.0\MvvmGen.SourceGenerators.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    <None Remove="_._" />
  </ItemGroup>

  <ItemGroup Condition="'$(Configuration)' == 'MvvmGen_PureCodeGeneration'">
    <None Include="..\MvvmGen.SourceGenerators\bin\$(Configuration)\netstandard2.0\MvvmGen.PureCodeGeneration.SourceGenerators.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    <None Include="_._" Pack="true" PackagePath="lib/netstandard2.0" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\LICENSE">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="packageIcon.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="readme.md">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>

</Project>
